// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  // Custom fields for linking to your existing models
  role          String    @default("student") // 'student' or 'admin'
  studentId     String?   @unique
  adminId       String?   @unique

  student Student? @relation(fields: [studentId], references: [id])
  admin   Admin?   @relation(fields: [adminId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Your existing schema models
model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
  
  @@map("admins")
}

model Student {
  id          String        @id @default(cuid())
  studentId   String        @unique
  name        String
  email       String        @unique
  password    String
  department  String
  cgpa        Float
  phone       String?
  address     String?
  status      String        @default("Active")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User?
  applications Application[]

  @@map("students")
}

// Your other models...
model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  email       String   @unique
  phone       String?
  address     String?
  location    String
  industry    String
  website     String?
  description String?
  status      String   @default("Active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobs        Job[]

  @@map("companies")
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String?
  requirements String?
  package      Float
  location     String?
  type         String        @default("Full-time")
  status       String        @default("Open")
  postedDate   DateTime      @default(now())
  deadline     DateTime?
  companyId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Application {
  id          String   @id @default(cuid())
  studentId   String
  jobId       String
  status      String   @default("Applied")
  appliedDate DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([studentId, jobId])
  @@map("applications")
}